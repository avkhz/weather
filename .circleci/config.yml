version: 2.1  # Version of CircleCI
orbs:
  discord: antonioned/discord@0.1.0
  bridgecrew: bridgecrew/bridgecrew@1.0.5


jobs:
  build:
    docker:
      - image: python:3.8
    steps:
      - checkout

      - run:
        # creates a virtual environment for you project, 
# install dependencies in it and run tests
          name: Run unit tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pytest
# Creates a remote Docker environment configured to execute Docker commands.
      - setup_remote_docker

      - run:
        # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
         # Builds a docker image to push to Docker Hub
 # Tag (-t) pattern is below, where CircleCI 
# to get the Dockerfile from the current directory.
         # <docker_hub_username/docker-hub-password:version>.
          name: Build Docker image
          command: docker build -t avkh12345/circleci:v2 ./app


      - run:
        # Pushes the Docker image you created to the Docker Hub.
        # Replace khabdrick/circleci-tutorial:v1 with the 
# <docker_hub_username/docker-hub-password:version> you used to build the image above
          name: Push to Gitlab Container Registry
          command: |
             docker login $DOCKER_REGISTRY -u $GITLAB_USERNAME -p $GITLAB_PASSWORD 
             docker build -t $DOCKER_REGISTRY/test_group1013907/test_project:weatherapp.1.0."${CIRCLE_BUILD_NUM}" ./app
             docker push $DOCKER_REGISTRY/test_group1013907/test_project:weatherapp.1.0."${CIRCLE_BUILD_NUM}"

#            docker login -u $USERNAME -p $PASSWORD
   #         docker push avkh12345/circleci:v2

      - discord/status:
          fail_only: false
          failure_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** failed."
          success_message: "**${CIRCLE_USERNAME}** deployed api to prod."
          webhook: "${DISCORD_WEBHOOK}"
  checkov:
    executor: bridgecrew/default
    steps:
      - checkout
      - bridgecrew/scan:
          api-key-variable: BC_API_KEY
          directory: ./terraform
          output: json
#          soft-fail: true
workflows:
  my-workflows:
    jobs:
      - build
      - checkov
